{
  "uid" : "4f5d5b96ecf475d5",
  "name" : "Открытие сделки со страницы Дашборда, ввод текста и проверка ввода через страницу Сделок",
  "fullName" : "tests.deals_test.TestDeals#test_open_deals_and_add_note_and_check",
  "historyId" : "f0f5e3318dbe089f0c6ea48989269ded",
  "time" : {
    "start" : 1760626698617,
    "stop" : 1760626715480,
    "duration" : 16863
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
  "statusTrace" : "self = <tests.deals_test.TestDeals object at 0x7fda7e514d90>\n\n    @pytest.mark.regression\n    @allure.title(\"Открытие сделки со страницы Дашборда, ввод текста и проверка ввода через страницу Сделок\")\n    def test_open_deals_and_add_note_and_check(self):\n        self.dashboard_page.open_page()           # Открываем страницу dashboard\n        name = self.dashboard_page.return_name_from_deals_pipeline_by_number(0)      # Получаем имя первой сделки\n        self.dashboard_page.open_deals_from_list_deals_by_number(0)        # Открываем сделку\n        text = 'AutoTestDeals'\n        self.deals_page.entering_text_in_deals(text)                    # Вписываем текст\n        self.deals_page.open_page()                                    # Открываем страницу deals\n        self.deals_page.open_deals_by_name(name)                       # Открываем сделку по имени\n>       text_result = self.deals_page.return_text_from_deals()   # Получаем текст\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests/deals_test.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/deals_page.py:26: in return_text_from_deals\n    self.wait.until(self.EC.visibility_of_element_located(self._TEXT_ENTERED_IN_DEALS))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"b304628750c23a0ae63b272b198c78dd\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x7fda7e502ac0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../local/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "driver",
    "time" : {
      "start" : 1760626698229,
      "stop" : 1760626698616,
      "duration" : 387
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "_xunit_setup_method_fixture_TestDeals",
    "time" : {
      "start" : 1760626698616,
      "stop" : 1760626698616,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
    "statusTrace" : "self = <tests.deals_test.TestDeals object at 0x7fda7e514d90>\n\n    @pytest.mark.regression\n    @allure.title(\"Открытие сделки со страницы Дашборда, ввод текста и проверка ввода через страницу Сделок\")\n    def test_open_deals_and_add_note_and_check(self):\n        self.dashboard_page.open_page()           # Открываем страницу dashboard\n        name = self.dashboard_page.return_name_from_deals_pipeline_by_number(0)      # Получаем имя первой сделки\n        self.dashboard_page.open_deals_from_list_deals_by_number(0)        # Открываем сделку\n        text = 'AutoTestDeals'\n        self.deals_page.entering_text_in_deals(text)                    # Вписываем текст\n        self.deals_page.open_page()                                    # Открываем страницу deals\n        self.deals_page.open_deals_by_name(name)                       # Открываем сделку по имени\n>       text_result = self.deals_page.return_text_from_deals()   # Получаем текст\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests/deals_test.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/deals_page.py:26: in return_text_from_deals\n    self.wait.until(self.EC.visibility_of_element_located(self._TEXT_ENTERED_IN_DEALS))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"b304628750c23a0ae63b272b198c78dd\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x7fda7e502ac0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../local/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException",
    "steps" : [ {
      "name" : "Открытие страницы https://dev-crm.qa-playground.com/#/",
      "time" : {
        "start" : 1760626698617,
        "stop" : 1760626701568,
        "duration" : 2951
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false,
      "stepsCount" : 0
    }, {
      "name" : "Получаем имя сделки по ее номеру на странице Дашборда",
      "time" : {
        "start" : 1760626701568,
        "stop" : 1760626702673,
        "duration" : 1105
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "number",
        "value" : "0"
      } ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "Открываем сделку по ее номеру на странице Дашборда",
      "time" : {
        "start" : 1760626702673,
        "stop" : 1760626702855,
        "duration" : 182
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "number",
        "value" : "0"
      } ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "Ввод текста в выбранную сделку на странице Сделок",
      "time" : {
        "start" : 1760626702855,
        "stop" : 1760626704125,
        "duration" : 1270
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "text",
        "value" : "'AutoTestDeals'"
      } ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "Открытие страницы https://dev-crm.qa-playground.com/#/deals",
      "time" : {
        "start" : 1760626704125,
        "stop" : 1760626704173,
        "duration" : 48
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false,
      "stepsCount" : 0
    }, {
      "name" : "Открываем сделку по ее имени на странице Сделок",
      "time" : {
        "start" : 1760626704173,
        "stop" : 1760626704557,
        "duration" : 384
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "name",
        "value" : "'Quas alias sit'"
      } ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "Получаем введенный текст в сделке на странице Сделок",
      "time" : {
        "start" : 1760626704557,
        "stop" : 1760626715480,
        "duration" : 10923
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: \n\n",
      "statusTrace" : "  File \"/usr/local/lib/python3.11/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/usr/workspace/pages/deals_page.py\", line 26, in return_text_from_deals\n    self.wait.until(self.EC.visibility_of_element_located(self._TEXT_ENTERED_IN_DEALS))\n  File \"/usr/local/lib/python3.11/site-packages/selenium/webdriver/support/wait.py\", line 138, in until\n    raise TimeoutException(message, screen, stacktrace)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true,
      "stepsCount" : 0
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 7
  },
  "afterStages" : [ {
    "name" : "driver::0",
    "time" : {
      "start" : 1760626715486,
      "stop" : 1760626715550,
      "duration" : 64
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "_xunit_setup_method_fixture_TestDeals::0",
    "time" : {
      "start" : 1760626715486,
      "stop" : 1760626715486,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тренировочный проект на https://release-crm.qa-playground.com"
  }, {
    "name" : "parentSuite",
    "value" : "Тренировочный проект на https://release-crm.qa-playground.com"
  }, {
    "name" : "tag",
    "value" : "regression"
  }, {
    "name" : "suite",
    "value" : "deals_test"
  }, {
    "name" : "subSuite",
    "value" : "TestDeals"
  }, {
    "name" : "host",
    "value" : "3ee4d2b70e4b"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.deals_test"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "regression" ]
  },
  "source" : "4f5d5b96ecf475d5.json",
  "parameterValues" : [ ]
}