{
  "uid" : "af932c6e3a239958",
  "name" : "Открытие контакта со страницы Дашборда, ввод текста и проверка ввода через страницу Контакты",
  "fullName" : "tests.contact_test.TestContact#test_open_from_hot_contacts_and_enter_text_and_check",
  "historyId" : "7dc34a0dcf8cb5685c913ed3a260b9ff",
  "time" : {
    "start" : 1760626643175,
    "stop" : 1760626660472,
    "duration" : 17297
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
  "statusTrace" : "self = <tests.contact_test.TestContact object at 0x7fda7e4b5010>\n\n    @pytest.mark.regression\n    @allure.title(\"Открытие контакта со страницы Дашборда, ввод текста и проверка ввода через страницу Контакты\")\n    def test_open_from_hot_contacts_and_enter_text_and_check(self):\n        self.dashboard_page.open_page()                 # Открываем страницу dashboard\n        name = self.dashboard_page.return_name_from_hot_list_by_number(0)   # Получаем имя первого контакта из топ-листа\n        self.dashboard_page.open_contact_from_hot_list_by_number(0)   # выбираем первого контакта\n        text = 'AutoTestContact'\n        self.contact_page.entering_text_in_contact(text)  # вписываем тест\n        self.contact_page.open_page()  # Открываем страницу contact\n        self.contact_page.open_contact_by_name(name)   # Ищем клиента по полученному имени выше и открываем\n>       text_result = self.contact_page.return_text_from_contact()  # Получаем текст\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests/contact_test.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/contacts_page.py:29: in return_text_from_contact\n    text_element = self.wait.until(self.EC.visibility_of_element_located(self._TEXT_ENTERED))\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"07dd4bfae4f1bb8a09a323e1ad5cd2b9\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x7fda7e503c40>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../local/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_xunit_setup_method_fixture_TestContact",
    "time" : {
      "start" : 1760626643175,
      "stop" : 1760626643175,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "driver",
    "time" : {
      "start" : 1760626642783,
      "stop" : 1760626643175,
      "duration" : 392
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
    "statusTrace" : "self = <tests.contact_test.TestContact object at 0x7fda7e4b5010>\n\n    @pytest.mark.regression\n    @allure.title(\"Открытие контакта со страницы Дашборда, ввод текста и проверка ввода через страницу Контакты\")\n    def test_open_from_hot_contacts_and_enter_text_and_check(self):\n        self.dashboard_page.open_page()                 # Открываем страницу dashboard\n        name = self.dashboard_page.return_name_from_hot_list_by_number(0)   # Получаем имя первого контакта из топ-листа\n        self.dashboard_page.open_contact_from_hot_list_by_number(0)   # выбираем первого контакта\n        text = 'AutoTestContact'\n        self.contact_page.entering_text_in_contact(text)  # вписываем тест\n        self.contact_page.open_page()  # Открываем страницу contact\n        self.contact_page.open_contact_by_name(name)   # Ищем клиента по полученному имени выше и открываем\n>       text_result = self.contact_page.return_text_from_contact()  # Получаем текст\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests/contact_test.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/contacts_page.py:29: in return_text_from_contact\n    text_element = self.wait.until(self.EC.visibility_of_element_located(self._TEXT_ENTERED))\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"07dd4bfae4f1bb8a09a323e1ad5cd2b9\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x7fda7e503c40>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../local/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException",
    "steps" : [ {
      "name" : "Открытие страницы https://dev-crm.qa-playground.com/#/",
      "time" : {
        "start" : 1760626643176,
        "stop" : 1760626645937,
        "duration" : 2761
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false,
      "stepsCount" : 0
    }, {
      "name" : "Получаем имя контакта по его номеру в хот листе на странице Дашборда",
      "time" : {
        "start" : 1760626645937,
        "stop" : 1760626647050,
        "duration" : 1113
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "number",
        "value" : "0"
      } ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "Открываем контакт выбранный по порядковому номеру в хот листе на странице Дашборда",
      "time" : {
        "start" : 1760626647050,
        "stop" : 1760626647196,
        "duration" : 146
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "number",
        "value" : "0"
      } ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "Ввод текста на страница выбранного контакта",
      "time" : {
        "start" : 1760626647196,
        "stop" : 1760626648447,
        "duration" : 1251
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "text",
        "value" : "'AutoTestContact'"
      } ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "Открытие страницы https://dev-crm.qa-playground.com/#/contacts",
      "time" : {
        "start" : 1760626648447,
        "stop" : 1760626648508,
        "duration" : 61
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false,
      "stepsCount" : 0
    }, {
      "name" : "Открываем контакт по имени",
      "time" : {
        "start" : 1760626648508,
        "stop" : 1760626649653,
        "duration" : 1145
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "name",
        "value" : "'Sandra King'"
      } ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "Получаем введенный тест со страница выбранного контакта",
      "time" : {
        "start" : 1760626649654,
        "stop" : 1760626660471,
        "duration" : 10817
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: \n\n",
      "statusTrace" : "  File \"/usr/local/lib/python3.11/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/usr/workspace/pages/contacts_page.py\", line 29, in return_text_from_contact\n    text_element = self.wait.until(self.EC.visibility_of_element_located(self._TEXT_ENTERED))\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/selenium/webdriver/support/wait.py\", line 138, in until\n    raise TimeoutException(message, screen, stacktrace)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true,
      "stepsCount" : 0
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 7
  },
  "afterStages" : [ {
    "name" : "_xunit_setup_method_fixture_TestContact::0",
    "time" : {
      "start" : 1760626660477,
      "stop" : 1760626660477,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "driver::0",
    "time" : {
      "start" : 1760626660477,
      "stop" : 1760626660541,
      "duration" : 64
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тренировочный проект на https://release-crm.qa-playground.com"
  }, {
    "name" : "parentSuite",
    "value" : "Тренировочный проект на https://release-crm.qa-playground.com"
  }, {
    "name" : "tag",
    "value" : "regression"
  }, {
    "name" : "suite",
    "value" : "contact_test"
  }, {
    "name" : "subSuite",
    "value" : "TestContact"
  }, {
    "name" : "host",
    "value" : "3ee4d2b70e4b"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.contact_test"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "regression" ]
  },
  "source" : "af932c6e3a239958.json",
  "parameterValues" : [ ]
}