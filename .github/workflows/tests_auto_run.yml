name: UI Tests Auto Run
run-name: ENV ${{ github.event.inputs.ENV }} | ${{ github.event.inputs.BROWSER }} browser | ${{ github.event.inputs.MARKER }} marker | ${{ github.event.inputs.KEY }} key

on:
  schedule:           # автозапуск, но может задерживаться из-за загрузки github
     - cron: '*/30 6-23 * * *'



jobs:
  ui-tests:
    runs-on: ubuntu-latest
    environment: release

    steps:
      # Клонируем репозиторий в раннер (главную ветку или выбранную при запуске) (Checkout исходного кода)
      - uses: actions/checkout@v2           # uses - использование специальных гитхабовских джоб

      - uses: actions/checkout@v2         # Checkout ветки gh-pages для истории в allure
        with:
          ref: gh-pages                  # Клонируем ветку gh-pages (которую создали в git) в раннер в ветку также gh-pages
          path: ./.github/gh-pages
          
      # Подготовка environment.properties, для того чтобы подтягивать в allure отчет переменные окружения
      - name: Prepare Allure environment
        run: |
          mkdir -p allure-results
          echo "Branch=${{ github.ref_name }}" > allure-results/environment.properties
          echo "Commit=${{ github.sha }}" >> allure-results/environment.properties
          echo "Browser=${{ 'chrome' }}" >> allure-results/environment.properties
          echo "Env=${{ 'release' }}" >> allure-results/environment.properties   
          echo "Stage=${{ secrets.STAGE }}" >> allure-results/environment.properties
          echo "LOGIN=${{ secrets.LOGIN }}" >> allure-results/environment.properties         
          echo "PASSWORD=${{ secrets.PASSWORD }}" >> allure-results/environment.properties
      # Login и Password добавил на вывод для отладки, так не должно быть конечно

      # Запуск тестов
      - name: Run tests via docker-compose
        env:               # Должны быть те же переменные окружения, что и в docker-compose, хотя если они из inputs, то автоматом должны подтянутся, но ->
          STAGE: ${{ secrets.STAGE }}            # здесь лишним не будет, а secrets обязательно писать  # STAGE: ${{ secrets.STAGE }}
          LOGIN: ${{ secrets.LOGIN }}
          PASSWORD: ${{ secrets.PASSWORD }}
          BROWSER: chrome
          ENV: release
          MARKER: ''
          KEY: ''
        run: |                      # | - означает многострочную команду
          docker compose up pom_dz_smoke

      # Шаг 4 - Копирование истории, создание папки history в allure-results если ее нет
      - name: Copy Allure history
        run: |
          mkdir -p allure-results/history
          if [ -d "./.github/gh-pages/history" ]; then
            cp -R ./.github/gh-pages/history/* allure-results/history/
          fi

      # Шаг 5 - Генерация отчета
      - name: Generate Allure-report
        env:
          BROWSER: ${{ 'chrome' }}
          ENV: ${{ 'release' }}
          STAGE: ${{ secrets.STAGE }}
          LOGIN: ${{ secrets.LOGIN }}
          PASSWORD: ${{ secrets.PASSWORD }}
          CI_COMMIT_REF_NAME: ${{ github.ref_name }}
          CI_COMMIT_SHORT_SHA: ${{ github.sha }}
        run: |
          docker compose up report

      # Шаг 6 - Деплой на gh-pages, спецальная гитхабовская джоба просто заполняем вот так, заливаем allure-report на ветку gh-pages
      - name: Deploy to Github Pages
        uses: JamesIves/github-pages-deploy-action@4.1.5
        with:
          token: ${{ secrets.CI_TOKEN }}
          branch: gh-pages
          folder: allure-report
          clean: false
