# Здесь пытался чтобы в пайплане передавать отчет в Allure TestOps, он передался, но job создавался неправильно с какой-то как будто кривой ссылкой
# но может и ошибаюсь в причине, и тесты не запускались из Allure TestOps, который создал руками job было зеленое соединение, но не видел тесты, может проблема
# в бесплатной версии ??? В данном пайплане Шаг 6 для передачи отчета в Allure TestOps, и много переменных, начинающихся на ALLURE
name: UI Tests with Allure Test Ops
run-name: ENV ${{ github.event.inputs.ENV }} | ${{ github.event.inputs.BROWSER }} browser | ${{ github.event.inputs.MARKER }} marker | ${{ github.event.inputs.KEY }} key

on:
  workflow_dispatch:
    inputs:
      ENV:
        description: "Choose environment"
        required: true
        type: environment # Важно: это тип environment!

      BROWSER:
        description: "Select the browser"
        required: true
        default: "chrome"
        type: choice
        options:
          - chrome
          - firefox

      MARKER:
        description: "Choose marker"
        required: false
        default: ""
        type: string

      KEY:
        description: "Name search"
        required: false
        type: string
        default: ""

jobs:
  ui-tests_test_ops:
    runs-on: ubuntu-latest         # На базе чего будет работать раннер, на работе могут быть другие
    environment: ${{ inputs.ENV }}  # ✅ Привязка джоба к выбранному environment

    steps:
      # Клонируем репозиторий в раннер (главную ветку или выбранную при запуске) (Checkout исходного кода)
      - uses: actions/checkout@v2           # uses - использование специальных гитхабовских джоб

      - uses: actions/checkout@v2         # Checkout ветки gh-pages для истории в allure
        with:
          ref: gh-pages                  # Клонируем ветку gh-pages (которую создали в git) в раннер в ветку также gh-pages
          path: ./.github/gh-pages

      # Подготовка environment.properties, для того чтобы подтягивать в allure отчет переменные окружения, чтобы увидеть в отчете
      - name: Prepare Allure environment
        run: |
          mkdir -p allure-results
          echo "Branch=${{ github.ref_name }}" > allure-results/environment.properties
          echo "Commit=${{ github.sha }}" >> allure-results/environment.properties
          echo "Browser=${{ inputs.BROWSER }}" >> allure-results/environment.properties          
          echo "Stage=${{ secrets.STAGE }}" >> allure-results/environment.properties
          echo "LOGIN=${{ secrets.LOGIN }}" >> allure-results/environment.properties         
          echo "PASSWORD=${{ secrets.PASSWORD }}" >> allure-results/environment.properties
          echo "ALLURE_TESTOPS_URL=${{ secrets.ALLURE_TESTOPS_URL }}" >> allure-results/environment.properties 
          echo "ALLURE_JOB_UID=${{ github.run_number }}" >> allure-results/environment.properties
          echo "ALLURE_JOB_RUN_UID=${{ github.run_id }}" >> allure-results/environment.properties

      # Запуск тестов
      - name: Run tests via docker-compose
        env:
          STAGE: ${{ secrets.STAGE }}
          LOGIN: ${{ secrets.LOGIN }}
          PASSWORD: ${{ secrets.PASSWORD }}
          BROWSER: ${{ inputs.BROWSER }}
          MARKER: ${{ inputs.MARKER }}
          KEY: ${{ inputs.KEY }}
          ALLURE_TESTOPS_URL: ${{ secrets.ALLURE_TESTOPS_URL }}   # Пять переменных ниже передаем в Docker-compose для Allure Test Ops
          ALLURE_PROJECT_ID: ${{ secrets.ALLURE_PROJECT_ID }}
          ALLURE_API_KEY: ${{ secrets.ALLURE_API_KEY }}
          ALLURE_JOB_UID: ${{ github.run_number }}
          ALLURE_JOB_RUN_UID: ${{ github.run_id }}
        run: |                      # | - означает многострочную команду
          docker compose up pom_dz_allure

      # Шаг 4 - Копирование истории, создание папки history в allure-results если ее нет
      - name: Copy Allure history
        run: |
          mkdir -p allure-results/history
          if [ -d "./.github/gh-pages/history" ]; then
            cp -R ./.github/gh-pages/history/* allure-results/history/
          fi

      # Шаг 5 - Генерация отчета
      - name: Generate Allure-report
        env:
          BROWSER: ${{ inputs.BROWSER }}
          STAGE: ${{ secrets.STAGE }}
          LOGIN: ${{ secrets.LOGIN }}
          PASSWORD: ${{ secrets.PASSWORD }}
          CI_COMMIT_REF_NAME: ${{ github.ref_name }}
          CI_COMMIT_SHORT_SHA: ${{ github.sha }}
          ALLURE_TESTOPS_URL: ${{ secrets.ALLURE_TESTOPS_URL }}
          ALLURE_PROJECT_ID: ${{ secrets.ALLURE_PROJECT_ID }}
          ALLURE_API_KEY: ${{ secrets.ALLURE_API_KEY }}
          ALLURE_JOB_UID: ${{ github.run_number }}
          ALLURE_JOB_RUN_UID: ${{ github.run_id }}
        run: |
          docker compose up report

#      # Шаг 6 - передача отчета в Allure TestOps
#      - name: Send results to Allure TestOps using allurectl
#        run: |
#          curl -fsSL https://github.com/allure-framework/allurectl/releases/latest/download/allurectl_linux_amd64 -o allurectl
#          chmod +x allurectl
#
#          if [[ ! -f allurectl ]]; then
#            echo "Failed to download allurectl binary."
#            exit 1
#          fi
#
#          ./allurectl upload \
#          --endpoint="${{ secrets.ALLURE_TESTOPS_URL }}" \
#          --project-id="${{ secrets.ALLURE_PROJECT_ID }}" \
#          --token="${{ secrets.ALLURE_API_KEY }}" \
#          "./allure-results"

      # Шаг 7 - Деплой на gh-pages, спецальная гитхабовская джоба просто заполняем вот так, заливаем allure-report на ветку gh-pages
      - name: Deploy to Github Pages
        uses: JamesIves/github-pages-deploy-action@4.1.5
        with:
          token: ${{ secrets.CI_TOKEN }}    # Передаем токен
          branch: gh-pages
          folder: allure-report
          clean: false
