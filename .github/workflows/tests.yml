# Перед этим файлом необходимо выполнить создание проекта по инструкции с добавлением файла README.MD и создание ветки gh-pages и добавление в секретные ->
# переменные CI_TOKEN, подробная инструкция в лекции и видео в каталоге AQA PROKA4/Модуль 09 - CI_CD, ну и конечно Dockerfile и docker-compose сделать
# Пайплайн — это набор инструкций, которые CircleCI выполняет автоматически, когда ты загружаешь код в репозиторий
name: UI Tests
run-name: ENV ${{ github.event.inputs.ENV }} | ${{ github.event.inputs.BROWSER }} browser | ${{ github.event.inputs.MARKER }} marker | ${{ github.event.inputs.KEY }} key
# Это название в Actions увидим, секретные переменные сюда нельзя выводить
# Git hub ranner - это как некий контейнер, внутри него будет запускаться наша job, а внутри джобы уже будет работать наш контейнер docker-compose

on:
  workflow_dispatch:    # Это ручной вариант запуска, в лекции еще описан по расписанию/времени, при пуше в main/master, запуск на каждый PR
    inputs:
      ENV:   # GitHub Environment (dev/test/etc), это как бы окружение для переменных окружения для конкретного стенда, т.е. в настройках проекта в github ->
        # в разделе Environments добавил окружение release, а в нем уже environment secret, такие как хост стенда - release, логин и пароль, которые нужны в ->
        # данном проекте RELEASE_LOGIN и RELEASE_PASSWORD, которые при локальном запуске, подтягиваются из .env, но .env мы не пушим в git, и далее в это файле ->
        # мы их достаем из secrets - LOGIN=${{ secrets.LOGIN }}
        description: "Choose environment"
        required: true
        type: environment # Важно: это тип environment!

      BROWSER:
        description: "Select the browser"
        required: true
        default: "chrome"
        type: choice
        options:
          - chrome
          - firefox

      MARKER:
        description: "Choose marker"
        required: false
        default: ""
        type: string

      KEY:
        description: "Name search"
        required: false
        type: string        # Чтобы вводить с клавиатуры знаечние, а не выбирать
        default: ""

jobs:
  ui-tests:
    runs-on: ubuntu-latest         # На базе чего будет работать раннер, на работе могут быть другие
    environment: ${{ inputs.ENV }}  # ✅ Привязка джоба к выбранному environment, чтобы тянулись нужные переменные окружения для конкретного стенда
                                                                    # (настройка environment в нашем проекте на github)

    steps:
      # Клонируем репозиторий в раннер (главную ветку или выбранную при запуске) (Checkout исходного кода)
      - uses: actions/checkout@v2           # uses - использование специальных гитхабовских джоб

      - uses: actions/checkout@v2         # Checkout ветки gh-pages для истории в allure
        with:
          ref: gh-pages                  # Клонируем ветку gh-pages (которую создали в git) в раннер в ветку также gh-pages
          path: ./.github/gh-pages

      # Подготовка environment.properties, для того чтобы подтягивать в allure отчет переменные окружения
      # inputs - это параметры (переменные окружения), которые мы передаем при ручном запуске
      # secrets - это переменные, которые скрыты,   # echo "Stage=${{ secrets.STAGE }}" >> allure-results/environment.properties
      - name: Prepare Allure environment
        run: |
          mkdir -p allure-results
          echo "Branch=${{ github.ref_name }}" > allure-results/environment.properties
          echo "Commit=${{ github.sha }}" >> allure-results/environment.properties
          echo "Browser=${{ inputs.BROWSER }}" >> allure-results/environment.properties          
          echo "Stage=${{ secrets.STAGE }}" >> allure-results/environment.properties
          echo "LOGIN=${{ secrets.LOGIN }}" >> allure-results/environment.properties         
          echo "PASSWORD=${{ secrets.PASSWORD }}" >> allure-results/environment.properties
      # Login и Password добавил на вывод для отладки, так не должно быть конечно

      # Запуск тестов
      - name: Run tests via docker-compose
        env:               # Должны быть те же переменные окружения, что и в docker-compose, хотя если они из inputs, то автоматом должны подтянутся, но ->
          STAGE: ${{ secrets.STAGE }}            # здесь лишним не будет, а secrets обязательно писать  # STAGE: ${{ secrets.STAGE }}
          LOGIN: ${{ secrets.LOGIN }}
          PASSWORD: ${{ secrets.PASSWORD }}
          BROWSER: ${{ inputs.BROWSER }}
          MARKER: ${{ inputs.MARKER }}
          KEY: ${{ inputs.KEY }}
        run: |                      # | - означает многострочную команду
          docker compose up pom_dz_smoke

      # Шаг 4 - Копирование истории, создание папки history в allure-results если ее нет
      - name: Copy Allure history
        run: |
          mkdir -p allure-results/history
          if [ -d "./.github/gh-pages/history" ]; then
            cp -R ./.github/gh-pages/history/* allure-results/history/
          fi

      # Шаг 5 - Генерация отчета
      - name: Generate Allure-report
        env:
          BROWSER: ${{ inputs.BROWSER }}
          STAGE: ${{ secrets.STAGE }}
          LOGIN: ${{ secrets.LOGIN }}
          PASSWORD: ${{ secrets.PASSWORD }}
          CI_COMMIT_REF_NAME: ${{ github.ref_name }}
          CI_COMMIT_SHORT_SHA: ${{ github.sha }}
        run: |
          docker compose up report

      # Шаг 6 - Деплой на gh-pages, спецальная гитхабовская джоба просто заполняем вот так, заливаем allure-report на ветку gh-pages
      - name: Deploy to Github Pages
        uses: JamesIves/github-pages-deploy-action@4.1.5
        with:
          token: ${{ secrets.CI_TOKEN }}
          branch: gh-pages
          folder: allure-report
          clean: false

# И дальше лучше командами в терминале git add .   git commit -m ""   git push
# Далее заходим в git hub на вкладку Actions видим наш workflows, выбираем его и запускаем Run workflow, а pages-build-deployment запуститься автоматически после ->
# выполнения тестов